{"version":3,"sources":["constants.js","pages/home/home.js","components/sidebar/sidebar.js","App.js","serviceWorker.js","index.js"],"names":["ROUTES","title","component","className","id","Object","keys","map","route","to","Component","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAGMA,G,MAAS,CACX,IAAK,CACDC,MAAO,OACPC,UCJK,WACT,OAAQ,oCACJ,yBAAKC,UAAU,aACX,wBAAIA,UAAU,aAAd,YACA,uBAAGA,UAAU,QAAb,6CACA,wBAAIA,UAAU,SACd,0DCFG,oBACX,yBAAKC,GAAG,UAAUD,UAAU,YACxB,yBAAKA,UAAU,kBACX,+CAGJ,wBAAIA,UAAU,4BACTE,OAAOC,KAAKN,GAAQO,KAAI,SAAAC,GAAK,OAC1B,wBAAIL,UAAU,YACV,kBAAC,IAAD,CAAMM,GAAID,EAAOL,UAAU,YAAYH,EAAOQ,GAAOP,cCV1D,aACX,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MAEA,yBAAKG,GAAG,WACJ,kBAAC,IAAD,KACKC,OAAOC,KAAKN,GAAQO,KAAI,SAAAC,GACrB,IAAME,EAAYV,EAAOQ,GAAON,UAChC,OACI,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAMJ,GACf,kBAACE,EAAD,UAIZ,kBAAC,IAAD,CAAUD,GAAG,UCRbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ead2db28.chunk.js","sourcesContent":["// import PoliticalCompass from \"./pages/generators/political-compass/political-compass\";\nimport Home from \"./pages/home/home\";\n\nconst ROUTES = {\n    \"/\": {\n        title: \"Home\",\n        component: Home\n    },\n    // \"/generators/political-compass\": {\n    //     title: \"Political Compass\",\n    //     component: PoliticalCompass,\n    // }\n}\n\nexport {ROUTES};","import React from \"react\";\n\nconst Home = () => {\n    return (<>\n        <div className=\"jumbotron\">\n            <h1 className=\"display-3\">Hello :)</h1>\n            <p className=\"lead\">I'm just having fun with some experiments</p>\n            <hr className=\"my-4\"/>\n            <p>Have a look around :D</p>\n        </div>\n    </>)\n};\n\n\nexport default Home;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./sidebar.scss\";\nimport {ROUTES} from \"../../constants\";\n\nexport default () => (\n    <nav id=\"sidebar\" className=\"bg-light\">\n        <div className=\"sidebar-header\">\n            <h4>Yoru's Toolbox</h4>\n        </div>\n\n        <ul className=\"list-unstyled components\">\n            {Object.keys(ROUTES).map(route => (\n                <li className=\"nav-item\">\n                    <Link to={route} className=\"nav-link\">{ROUTES[route].title}</Link>\n                </li>\n            ))}\n        </ul>\n\n    </nav>);","import React from \"react\";\nimport  {BrowserRouter, Route, Switch,Redirect} from \"react-router-dom\";\nimport Sidebar from \"./components/sidebar/sidebar\";\nimport {ROUTES} from \"./constants\";\n\nexport default () => {\n    return (\n        <BrowserRouter>\n            <Sidebar/>\n\n            <div id=\"content\">\n                <Switch>\n                    {Object.keys(ROUTES).map(route => {\n                        const Component = ROUTES[route].component;\n                        return (\n                            <Route exact path={route}>\n                                <Component/>\n                            </Route>\n                        )\n                    })}\n                    <Redirect to=\"/\" />\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}